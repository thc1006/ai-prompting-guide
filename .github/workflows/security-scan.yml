name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --json > audit-report.json || true
          if [ -s audit-report.json ]; then
            echo "Vulnerabilities found. See audit report."
            cat audit-report.json
          fi

      - name: Upload audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-report
          path: audit-report.json

  # Secret scanning
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.pull_request.base.sha || github.event.before || github.sha }}
          head: ${{ github.event.pull_request.head.sha || github.sha }}
          extra_args: --debug --only-verified
        continue-on-error: true

  # SAST - Static Application Security Testing
  sast-scan:
    name: Static Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install ESLint security plugin
        run: |
          npm install --save-dev eslint-plugin-security
          npm install --save-dev eslint-plugin-no-unsanitized

      - name: Run ESLint with security rules
        run: |
          npx eslint . --ext .js,.jsx,.ts,.tsx \
            --plugin security \
            --plugin no-unsanitized \
            --rule 'security/detect-object-injection: error' \
            --rule 'security/detect-non-literal-regexp: warn' \
            --rule 'security/detect-unsafe-regex: error' \
            --rule 'no-unsanitized/property: error' \
            --rule 'no-unsanitized/method: error' \
            --format json \
            --output-file eslint-security-report.json || true

      - name: Upload SAST results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eslint-security-report
          path: eslint-security-report.json

  # CodeQL Analysis
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  # Container scanning (if using Docker)
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: false # Enable if using Docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # License compliance check
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install license checker
        run: npm install -g license-checker

      - name: Check licenses
        run: |
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;CC0-1.0;CC-BY-3.0;CC-BY-4.0;Unlicense' \
            --excludePrivatePackages \
            --json > license-report.json || true

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: license-report.json

  # Security report summary
  security-report:
    name: Security Report Summary
    needs: [dependency-scan, secret-scan, sast-scan, codeql-analysis, license-check]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security summary
        run: |
          echo "## Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "### Scan Results:" >> security-summary.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-summary.md
          echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-summary.md
          echo "- SAST Scan: ${{ needs.sast-scan.result }}" >> security-summary.md
          echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> security-summary.md
          echo "- License Check: ${{ needs.license-check.result }}" >> security-summary.md
          echo "" >> security-summary.md
          echo "Generated at: $(date -u)" >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md